{"version":3,"sources":["Graph.jsx","parseCSV.js","Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Graph","graphRef","React","createRef","this","props","filename","xLabel","yLabel","lineLabel","lineColor","thisChart","current","getContext","filePath","process","fetch","then","response","text","dataArr","strData","strDelimiter","objPattern","RegExp","arrData","arrMatches","isNewRow","exec","strMatchedValue","strMatchedDelimiter","length","replace","push","substr","parseColumnsCSV","Chart","type","data","labels","datasets","label","fill","borderColor","options","scales","xAxes","scaleLabel","display","labelString","yAxes","console","log","title","className","style","padding","ref","Component","Dashboard","App","rel","target","href","textDecoration","class","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.06fba0b7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Chart from 'chart.js';\nimport { parseColumnsCSV } from './parseCSV';\n\nexport default class Graph extends Component {\n  graphRef = React.createRef();\n\n  componentDidMount() {\n    const { filename, xLabel, yLabel, lineLabel, lineColor } = this.props;\n    const thisChart = this.graphRef.current.getContext(\"2d\");\n    var filePath = `${process.env.PUBLIC_URL}/data/${filename}`;\n    fetch(filePath)\n      .then(response => {\n        return response.text();\n      })\n      .then(text => {\n        var dataArr =  parseColumnsCSV(text, ',');\n        new Chart(thisChart, {\n          type: \"line\",\n          data: {\n            labels: dataArr[0],\n            datasets: [ \n              {\n                label: lineLabel,\n                data: dataArr[1],\n                fill: false,\n                borderColor: lineColor\n              }\n            ],\n          },\n          options: {\n            scales: {\n              xAxes: [{\n                scaleLabel: {\n                  display: true,\n                  labelString: xLabel\n                }\n              }],\n              yAxes: [{\n                scaleLabel: {\n                  display: true,\n                  labelString: yLabel\n                }\n              }]\n            }\n          }\n        });\n        console.log(dataArr)\n      });\n  }\n\n  render() {\n    const { title } = this.props;\n    return(\n      <div className=\"graph-container\">\n        <div style={{ padding: '5px' }}>\n          { title }\n        </div>\n        <div className=\"graph\">\n          <canvas ref={this.graphRef}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nGraph.propTypes = {\n  filename: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  xLabel: PropTypes.string.isRequired,\n  yLabel: PropTypes.string.isRequired,\n  lineLabel: PropTypes.string.isRequired,\n  lineColor: PropTypes.string.isRequired\n};\n","export function parseCSV( strData, strDelimiter ){\n    // Check to see if the delimiter is defined. If not,\n    // then default to comma.\n    strDelimiter = (strDelimiter || \",\");\n\n    // Create a regular expression to parse the CSV values.\n    var objPattern = new RegExp(\n        (\n            // Delimiters.\n            \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n\n            // Quoted fields.\n            \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n\n            // Standard fields.\n            \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\n        ),\n        \"gi\"\n        );\n\n\n    // Create an array to hold our data. Give the array\n    // a default empty first row.\n    var arrData = [[]];\n\n    // Create an array to hold our individual pattern\n    // matching groups.\n    var arrMatches = null;\n\n\n    // Keep looping over the regular expression matches\n    // until we can no longer find a match.\n    while (arrMatches = objPattern.exec( strData )){\n\n        // Get the delimiter that was found.\n        var strMatchedDelimiter = arrMatches[ 1 ];\n\n        // Check to see if the given delimiter has a length\n        // (is not the start of string) and if it matches\n        // field delimiter. If id does not, then we know\n        // that this delimiter is a row delimiter.\n        if (\n            strMatchedDelimiter.length &&\n            strMatchedDelimiter !== strDelimiter\n            ){\n\n            // Since we have reached a new row of data,\n            // add an empty row to our data array.\n            arrData.push( [] );\n\n        }\n\n        var strMatchedValue;\n\n        // Now that we have our delimiter out of the way,\n        // let's check to see which kind of value we\n        // captured (quoted or unquoted).\n        if (arrMatches[ 2 ]){\n\n            // We found a quoted value. When we capture\n            // this value, unescape any double quotes.\n            strMatchedValue = arrMatches[ 2 ].replace(\n                new RegExp( \"\\\"\\\"\", \"g\" ),\n                \"\\\"\"\n                );\n\n        } else {\n\n            // We found a non-quoted value.\n            strMatchedValue = arrMatches[ 3 ];\n\n        }\n\n\n        // Now that we have our value string, let's add\n        // it to the data array.\n        arrData[ arrData.length - 1 ].push( strMatchedValue );\n    }\n\n    // Return the parsed data.\n    return( arrData );\n}\n\nexport function parseColumnsCSV( strData, strDelimiter ){\n    // Check to see if the delimiter is defined. If not,\n    // then default to comma.\n    strDelimiter = (strDelimiter || \",\");\n\n    // Create a regular expression to parse the CSV values.\n    var objPattern = new RegExp(\n        (\n            // Delimiters.\n            \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n\n            // Quoted fields.\n            \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n\n            // Standard fields.\n            \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\n        ),\n        \"gi\"\n        );\n\n\n    // Create an array to hold our data. Give the array\n    // two columns.\n    var arrData = [[], []];\n\n    // Create an array to hold our individual pattern\n    // matching groups.\n    var arrMatches = null;\n\n\n    // Keep looping over the regular expression matches\n    // until we can no longer find a match.\n    var isNewRow = true;\n    while (arrMatches = objPattern.exec( strData )){\n\n        // Get the delimiter that was found.\n        var strMatchedDelimiter = arrMatches[ 1 ];\n\n        // Check to see if the given delimiter has a length\n        // (is not the start of string) and if it matches\n        // field delimiter. If id does not, then we know\n        // that this delimiter is a row delimiter.\n        if (\n            strMatchedDelimiter.length &&\n            strMatchedDelimiter !== strDelimiter\n            ){\n\n            // Since we have reached a new row of data,\n            // increment the row index.\n            isNewRow = true;\n        }\n\n        var strMatchedValue;\n\n        // Now that we have our delimiter out of the way,\n        // let's check to see which kind of value we\n        // captured (quoted or unquoted).\n        if (arrMatches[ 2 ]){\n\n            // We found a quoted value. When we capture\n            // this value, unescape any double quotes.\n            strMatchedValue = arrMatches[ 2 ].replace(\n                new RegExp( \"\\\"\\\"\", \"g\" ),\n                \"\\\"\"\n                );\n\n        } else {\n\n            // We found a non-quoted value.\n            strMatchedValue = arrMatches[ 3 ];\n\n        }\n\n\n        // Now that we have our value string, let's add\n        // it to the data array.\n        isNewRow ? arrData[0].push( strMatchedValue.substr(5,5) ) : arrData[1].push( strMatchedValue );\n        isNewRow = false;\n    }\n    return ( arrData );\n}","import React, { Component } from 'react';\nimport Graph from './Graph';\n\nexport default class Dashboard extends Component {\n  render() {\n    return(\n      <div className=\"grid\">\n        <Graph \n          filename={\"data1.csv\"}\n          title={\"Arbitrary Graph 1\"}\n          xLabel={\"Dates\"}\n          yLabel={\"Counts (number of)\"}\n          lineLabel={\"Counts\"}\n          lineColor={\"#3e95cd\"}\n        />\n        <Graph \n          filename={\"data2.csv\"}\n          title={\"Arbitrary Graph 2\"}\n          xLabel={\"Dates\"}\n          yLabel={\"Remnnants (number of)\"}\n          lineLabel={\"Remnants\"}\n          lineColor={\"#3e9523\"}\n        />\n      </div>\n    );\n  }\n}","import React from 'react';\nimport Dashboard from './Dashboard';\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <div className=\"banner\">\n        <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://calvang.github.io\"\n          style={{ textDecoration: 'none' }}>\n          <h1>\n            <i class=\"fa fa-github\"></i> Github pages dashboard\n          </h1>\n        </a>\n      </div>\n      <Dashboard />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}